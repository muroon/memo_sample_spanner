// Code generated by yo. DO NOT EDIT.
// Package model contains the types.
package model

import (
	"context"
	"fmt"

	"cloud.google.com/go/spanner"
	"google.golang.org/grpc/codes"
)

// Tag represents a row from 'Tag'.
type Tag struct {
	TagID string             `spanner:"TagID" json:"TagID"` // TagID
	Title spanner.NullString `spanner:"Title" json:"Title"` // Title
}

func TagPrimaryKeys() []string {
	return []string{
		"TagID",
	}
}

func TagColumns() []string {
	return []string{
		"TagID",
		"Title",
	}
}

func (t *Tag) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "TagID":
			ret = append(ret, &t.TagID)
		case "Title":
			ret = append(ret, &t.Title)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (t *Tag) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "TagID":
			ret = append(ret, t.TagID)
		case "Title":
			ret = append(ret, t.Title)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newTag_Decoder returns a decoder which reads a row from *spanner.Row
// into Tag. The decoder is not goroutine-safe. Don't use it concurrently.
func newTag_Decoder(cols []string) func(*spanner.Row) (*Tag, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*Tag, error) {
		var t Tag
		ptrs, err := t.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &t, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (t *Tag) Insert(ctx context.Context) *spanner.Mutation {
	return spanner.Insert("Tag", TagColumns(), []interface{}{
		t.TagID, t.Title,
	})
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (t *Tag) Update(ctx context.Context) *spanner.Mutation {
	return spanner.Update("Tag", TagColumns(), []interface{}{
		t.TagID, t.Title,
	})
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (t *Tag) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	return spanner.InsertOrUpdate("Tag", TagColumns(), []interface{}{
		t.TagID, t.Title,
	})
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (t *Tag) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, TagPrimaryKeys()...)

	values, err := t.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "Tag.UpdateColumns", "Tag", err)
	}

	return spanner.Update("Tag", colsWithPKeys, values), nil
}

// FindTag gets a Tag by primary key
func FindTag(ctx context.Context, db YORODB, tagID string) (*Tag, error) {
	key := spanner.Key{tagID}
	row, err := db.ReadRow(ctx, "Tag", key, TagColumns())
	if err != nil {
		return nil, newError("FindTag", "Tag", err)
	}

	decoder := newTag_Decoder(TagColumns())
	t, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindTag", "Tag", err)
	}

	return t, nil
}

// Delete deletes the Tag from the database.
func (t *Tag) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := t.columnsToValues(TagPrimaryKeys())
	return spanner.Delete("Tag", spanner.Key(values))
}
