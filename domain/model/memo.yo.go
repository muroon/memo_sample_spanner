// Code generated by yo. DO NOT EDIT.
// Package model contains the types.
package model

import (
	"context"
	"fmt"

	"cloud.google.com/go/spanner"
	"google.golang.org/grpc/codes"
)

// Memo represents a row from 'Memo'.
type Memo struct {
	MemoID string             `spanner:"MemoID" json:"MemoID"` // MemoID
	Text   spanner.NullString `spanner:"Text" json:"Text"`     // Text
}

func MemoPrimaryKeys() []string {
	return []string{
		"MemoID",
	}
}

func MemoColumns() []string {
	return []string{
		"MemoID",
		"Text",
	}
}

func (m *Memo) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "MemoID":
			ret = append(ret, &m.MemoID)
		case "Text":
			ret = append(ret, &m.Text)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (m *Memo) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "MemoID":
			ret = append(ret, m.MemoID)
		case "Text":
			ret = append(ret, m.Text)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newMemo_Decoder returns a decoder which reads a row from *spanner.Row
// into Memo. The decoder is not goroutine-safe. Don't use it concurrently.
func newMemo_Decoder(cols []string) func(*spanner.Row) (*Memo, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*Memo, error) {
		var m Memo
		ptrs, err := m.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &m, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (m *Memo) Insert(ctx context.Context) *spanner.Mutation {
	return spanner.Insert("Memo", MemoColumns(), []interface{}{
		m.MemoID, m.Text,
	})
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (m *Memo) Update(ctx context.Context) *spanner.Mutation {
	return spanner.Update("Memo", MemoColumns(), []interface{}{
		m.MemoID, m.Text,
	})
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (m *Memo) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	return spanner.InsertOrUpdate("Memo", MemoColumns(), []interface{}{
		m.MemoID, m.Text,
	})
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (m *Memo) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, MemoPrimaryKeys()...)

	values, err := m.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "Memo.UpdateColumns", "Memo", err)
	}

	return spanner.Update("Memo", colsWithPKeys, values), nil
}

// FindMemo gets a Memo by primary key
func FindMemo(ctx context.Context, db YORODB, memoID string) (*Memo, error) {
	key := spanner.Key{memoID}
	row, err := db.ReadRow(ctx, "Memo", key, MemoColumns())
	if err != nil {
		return nil, newError("FindMemo", "Memo", err)
	}

	decoder := newMemo_Decoder(MemoColumns())
	m, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindMemo", "Memo", err)
	}

	return m, nil
}

// Delete deletes the Memo from the database.
func (m *Memo) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := m.columnsToValues(MemoPrimaryKeys())
	return spanner.Delete("Memo", spanner.Key(values))
}
