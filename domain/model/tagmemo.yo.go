// Code generated by yo. DO NOT EDIT.
// Package model contains the types.
package model

import (
	"context"
	"fmt"

	"cloud.google.com/go/spanner"
)

// TagMemo represents a row from 'TagMemo'.
type TagMemo struct {
	TagID  string `spanner:"TagID" json:"TagID"`   // TagID
	MemoID string `spanner:"MemoID" json:"MemoID"` // MemoID
}

func TagMemoPrimaryKeys() []string {
	return []string{
		"TagID",
		"MemoID",
	}
}

func TagMemoColumns() []string {
	return []string{
		"TagID",
		"MemoID",
	}
}

func (tm *TagMemo) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "TagID":
			ret = append(ret, &tm.TagID)
		case "MemoID":
			ret = append(ret, &tm.MemoID)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (tm *TagMemo) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "TagID":
			ret = append(ret, tm.TagID)
		case "MemoID":
			ret = append(ret, tm.MemoID)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newTagMemo_Decoder returns a decoder which reads a row from *spanner.Row
// into TagMemo. The decoder is not goroutine-safe. Don't use it concurrently.
func newTagMemo_Decoder(cols []string) func(*spanner.Row) (*TagMemo, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*TagMemo, error) {
		var tm TagMemo
		ptrs, err := tm.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &tm, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (tm *TagMemo) Insert(ctx context.Context) *spanner.Mutation {
	return spanner.Insert("TagMemo", TagMemoColumns(), []interface{}{
		tm.TagID, tm.MemoID,
	})
}

// Delete deletes the TagMemo from the database.
func (tm *TagMemo) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := tm.columnsToValues(TagMemoPrimaryKeys())
	return spanner.Delete("TagMemo", spanner.Key(values))
}
