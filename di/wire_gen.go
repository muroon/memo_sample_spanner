// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package di

import (
	"github.com/google/wire"
	"memo_sample_spanner/adapter/logger"
	"memo_sample_spanner/adapter/spanner"
	"memo_sample_spanner/adapter/view/render"
	"memo_sample_spanner/infra/error"
	"memo_sample_spanner/interface/api"
	"memo_sample_spanner/usecase"
)

// Injectors from injector.go:

func InjectAPIServer() api.API {
	jsonRender := view.NewJSONRender()
	logger := loggersub.NewLogger()
	errorManager := apperror.NewErrorManager()
	presenter := api.NewPresenter(jsonRender, logger, errorManager)
	iTransaction := spanner.NewTransaction()
	memoRepository := spanner.NewMemoRepository()
	tagRepository := spanner.NewTagRepository()
	memo := usecase.NewMemo(memoRepository, tagRepository, errorManager)
	iInteractor := usecase.NewInteractor(presenter, iTransaction, memo)
	apiAPI := api.NewAPI(iInteractor, logger)
	return apiAPI
}

// injector.go:

// ProvideAPI inject api using wire
var ProvideAPI = wire.NewSet(
	ProvideUsecaseIterator, api.NewAPI,
)

// ProvidePresenter inject presenter using wire
var ProvidePresenter = wire.NewSet(
	ProvideRender,
	ProvideLog, api.NewPresenter, ProvideErrorManager,
)

// ProvideMemoUsecase inject memo usecase using wire
var ProvideMemoUsecase = wire.NewSet(
	ProvideSpannerRepository, usecase.NewMemo,
)

// ProvideUsecaseIterator inject usecase itetator using wire
var ProvideUsecaseIterator = wire.NewSet(
	ProvidePresenter,
	ProviderTransaction,
	ProvideMemoUsecase, usecase.NewInteractor,
)

var ProviderTransaction = wire.NewSet(spanner.NewTransaction)

var ProvideSpannerRepository = wire.NewSet(spanner.NewMemoRepository, spanner.NewTagRepository)

// ProvideLog inject log using wire
var ProvideLog = wire.NewSet(loggersub.NewLogger)

// ProvideRender inject render using wire
var ProvideRender = wire.NewSet(view.NewJSONRender)

// ProvideErrorManager inject error manager using wire
var ProvideErrorManager = wire.NewSet(apperror.NewErrorManager)
